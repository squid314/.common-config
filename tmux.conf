# .tmux.conf

# use C-a, similar to screen because C-a is a better mapping.
unbind-key C-b
unbind-key l
set-option -g prefix C-a
bind-key C-a last-window
bind-key a send-prefix

# reload config key
bind-key r source-file ~/.tmux.conf

# i want uber history
set-option -g history-limit 100000

# configure status line
set-option -g status-bg black
set-option -g status-fg white
set-option -g status-interval 60
set-option -g status-left-length 30
set-option -g status-left '#[fg=green](#S) #(whoami)@#H#[default]'
# detect linux vs bsd based on the /proc/loadavg file which we use in linux only
if-shell "[ -e /proc/loadavg ]" \
    "set-option -g status-right '#[fg=yellow]#(cut -d \" \" -f 1-3 /proc/loadavg         )#[default] #[fg=blue,bright]%H:%M#[default]'" \
    "set-option -g status-right '#[fg=yellow]#(sysctl -n vm.loadavg | cut -d \" \" -f 2-4)#[default] #[fg=blue,bright]%H:%M#[default]'"

# set term variable. tmux now supports more termcaps, but most hosts don't have a termcap for "tmux-256color" in their database, so we use the old version
set-option -g default-terminal screen-256color
# show better titles
set-option -g set-titles on
# disable setting of the window title by programs, i can always set the title myself
set-option -g allow-rename off

# get help quickly
bind-key K new-window -n 'man tmux' 'man tmux'
bind-key ? list-keys # have to override this since i don't want -N
unbind-key / # this is broken, imo, unbind

# bind C-<key> to various keys, so i don't have to be careful to lift my finger off of Ctrl
bind-key C-c new-window
bind-key C-d detach-client
bind-key C-r source-file ~/.tmux.conf

# move windows around
# -d added since default behavior changed which window was selected after the operation (i think the new setting is incorrect, but if it is consistent...)
bind-key -r < swap-window -dt :-
bind-key -r > swap-window -dt :+

# open new window based on current directory, rather than default-path (required since tmux 1.9)
bind-key C new-window -c '#{pane_current_path}'

# panes
bind-key "'" split-window
bind-key '"' split-window -c '#{pane_current_path}' # this is probably more common, i may make this the ' version
# if i'm going to split a window horizontally, i most likely want it to use the same path
bind-key % split-window -h -c '#{pane_current_path}'
# alternate move-between-panes keys
bind-key -r k select-pane -U
bind-key -r j select-pane -D
bind-key -r h select-pane -L
bind-key -r l select-pane -R
# rebind these as repeatable (the -r) and add "select-pane previous"
bind-key -r o select-pane -t :.+
bind-key -r O select-pane -t :.-
bind-key -r C-o rotate-window
bind-key -r M-o rotate-window -D
# add binding to trigger layout to be applied again (typically for forcing panes to be evenly spread)
bind-key C-e select-layout

# unbind the silly "suspend-client"
unbind-key C-z

# toggle pane typing synchronization
bind-key S set-option -w synchronize-panes
# toggle mouse capture
bind-key v set-option mouse
# kill pane default is x, add respawn as X
bind-key X respawn-pane
# toggle pane remain-on-exit
bind-key C-x set-option -p remain-on-exit

# stamp useful items into other shells
bind-key \\ send-keys "PS1='\\u@\\h \\w :`[ $? = 0 ] && echo \\) || echo \\(` \\$ ' ; EDITOR=vim ; export EDITOR ; set -o vi ; bind 'set completion-ignore-case' ; alias sudo=sudo\\  ls=ls\\ --color=auto li=ls\\ -lashi"

# toggle side-by-side panes between 50% and 95% width (assume only 2 panes)
bind-key Z if-shell 'test #{pane_width} -lt #{window_width}' {
    if-shell 'test #{pane_width} -lt $((#{window_width} * 4 / 5))' \
        { resize-pane -x 95% } \
        { resize-pane -x 50% }
}
